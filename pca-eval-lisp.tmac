.\" last modified 2016-02-12
.
.ds pca-eval:file \\*[AUXF].lisp
.
.de pca-eval:process-snippets
.  \" change this to suit your Common Lisp implementation
.  sy touch \\*[pca-eval:file]
.  sy if test ! -f \\*[pca-eval:file]; then :; \
   elif test "$LISP" = clisp; then clisp \\*[pca-eval:file]; \
   elif test "$LISP" = clozure; then ccl -l \\*[pca-eval:file] -e '(ccl:quit)'; \
   elif test "$LISP" = cmu; then lisp -quiet -load \\*[pca-eval:file] -eval '(ext:quit)'; \
   elif test "$LISP" = ecl; then ecl -shell \\*[pca-eval:file]; \
   elif test "$LISP" = sbcl; then sbcl --noinform --load \\*[pca-eval:file] --eval '(sb-ext:quit)'; \
   elif test "$(uname -s)" = Linux -o "$(uname -s)" = SunOS; \
     then sbcl --noinform --load \\*[pca-eval:file] --eval '(sb-ext:quit)'; \
   elif test "$(uname -s)" = Darwin; then ccl -l \\*[pca-eval:file] -e '(ccl:quit)'; \
   else clisp \\*[pca-eval:file]; \
   fi
..
.
.de pca-eval:start-snippets
.  write pca-eval:stream (defvar *pca-eva-lisp-stdout* *standard-output*)
.
.  write pca-eval:stream (defun pca-eva-lisp-preamble (f)
.  write pca-eval:stream   (setq *standard-output*
.  write pca-eval:stream     (open f :direction :output :if-exists :supersede)))
.
.  write pca-eval:stream (defun pca-eva-lisp-postamble ()
.  write pca-eval:stream   (format t "\\\\\\\\c~%")
.  write pca-eval:stream   (format t ".ds pca-eval:status done~%")
.  write pca-eval:stream   (close *standard-output*)
.  write pca-eval:stream   (setq *standard-output* *pca-eva-lisp-stdout*))
..
.
.de pca-eval:write-snippet
.  write  pca-eval:stream (pca-eva-lisp-preamble "\\*[AUXF]-eval-\\n[pca-eval:count].tmp")
.  writem pca-eval:stream pca-eval:text
.  write  pca-eval:stream (pca-eva-lisp-postamble)
..
.
.if \n[.troff2page] .mso pca-t2p-eval.tmac
