.\" last modified 2016-02-12
.\" Dorai Sitaram
.
.\" don't load if not groff
.
.if !\n(.g .nx
.
.\" don't load more than once
.
.if d pca-eval:process-snippets .nx
.
.if '\*[AUXF]'' .ds AUXF .trofftemp
.
.\" if pca-eval-lang is neither lisp or js, assume lisp
.
.ie '\*[pca-eval-lang]'' .ds pca-eval-lang lisp
.el .ie '\*[pca-eval-lang]'lisp' .\"
.el .ie '\*[pca-eval-lang]'js' .\"
.el .ds pca-eval-lang lisp
.
.mso pca-eval-\*[pca-eval-lang].tmac
.
.nr pca-eval:already-set-up 0
.
.de pca-eval:set-up
.  if \\n[pca-eval:already-set-up] .return
.  nr pca-eval:already-set-up 1
.  nr pca-eval:count 0
.  if !\\n[.U] .return
.  pca-eval:process-snippets
.  open pca-eval:stream \\*[pca-eval:file]
.  pca-eval:start-snippets
..
.
.ds pca-eval:status try
.
.de eval
.  eo
.  de pca-eval:text endeval
..
.
.de endeval
.  ec
.  pca-eval:so-snippet
.  if !\\n[.U] .return
.  pca-eval:write-snippet
\" empty line needed here!
..
.
.de pca-eval:so-snippet
.  pca-eval:set-up
.  nr pca-eval:count +1
.  ds pca-eval:snippet-file \\*[AUXF]-eval-\\n[pca-eval:count].tmp
.  if !'\\*[pca-eval:status]'rerun' \{\
.    nr pca-eval:systat 0
.    if \\n[.U] \{\
.      sy test -f \\*[pca-eval:snippet-file]
.      nr pca-eval:systat \\n[systat]
.    \}
.    if !\\n[pca-eval:systat] \{\
.      so \\*[pca-eval:snippet-file]
.      if '\\*[pca-eval:status]'done' .return
.    \}
.    ds pca-eval:status rerun
.    if !\\n[.troff2page] .tm Rerun groff with -U
.  \}
\[rh]eval\[lh]
..
